1. container with most water

class Solution {
public:
    int maxArea(vector<int>& height) {
        int i = 0;
        int j = height.size()-1;
        int maxi=0;
        while(i<j){
            int bredth=j-i;
            int h= min(height[i],height[j]);
            int area= bredth*h;
            maxi= max(maxi,area);
            if (height[i] < height[j]) i++;
            else if (height[i]>height[j]) j--;
            else{
                i++;
                j--;
            }
        }
        return maxi;
    }
};

2. merge sorted array

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=m;
        int j=0;
        while (j<n){
            nums1[i]=nums2[j];
            i++;
            j++;

        }
        sort(nums1.begin(),nums1.end());
    }
};

3. trapping rain water

class Solution {
public:
    int trap(vector<int>& height) {
        int n= height.size();
        vector<int> prefix(n);
        vector<int> suffix(n);
        
        prefix[0]=height[0];
        suffix[n-1]=height[n-1];
        int count=0;

        for(int i=1;i<n;i++){
            prefix[i] = max(prefix[i-1],height[i]);
        }
        for(int i=n-2;i>=0;i--){
            suffix[i]= max(suffix[i+1],height[i]);
        }
        for(int i= 0;i<n;i++){
            count+= min(prefix[i],suffix[i]) - height[i];
        }
        return count;
    }
};
