1. spiral traversal 

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m=matrix[0].size();
        int n= matrix.size();
        int top=0,left=0;
        int bottom=n-1,right=m-1;
        vector<int> ans;

        while(left<=right && top<=bottom){
            for (int i=left; i<=right; i++){
                ans.push_back(matrix[top][i]);
            }
            top++;

            for (int i= top; i<= bottom; i++){
                ans.push_back(matrix[i][right]);
            }
            right--;

            if (top<=bottom){
                for(int i=right; i>=left;i--){
                    ans.push_back(matrix[bottom][i]);
                }
                bottom--;
            }
            if (left<=right){
                for(int i=bottom; i>=top;i--){
                    ans.push_back(matrix[i][left]);
                }
                left++;
            }
        }
        return ans;
    }
};


2. searching elements in a matrix 

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size();
        int m=matrix[0].size();
        int low=0;
        int high= n*m-1;
        while(low<=high){
            int mid=(low+high)/2;
            int row=mid/m;
            int col=mid%m;
            if(matrix[row][col]==target){
                return true;
            }
            else if(matrix[row][col]>target){
                high=mid-1;
            }
            else{
                low=mid+1;
            }

        }
        return false;
    }
};

3. printing elements in a sorted order

class Solution {
public:

    void merge(vector<int>& nums, int low , int mid, int high){
        if(low>=high) return;
        int l=low, r= mid+1, k=0, size= high-low+1;
        vector<int> sorted(size,0);
        while (l<=mid and r<=high) sorted[k++]= nums[l] < nums[r]? nums[l++]: nums[r++];
        while (l<= mid) sorted[k++]= nums[l++];
        while (r<= high) sorted[k++]= nums[r++];
        for (k=0;k<size;k++) nums[k+low] = sorted[k];
    }

    void mergesort(vector<int> & nums, int low, int high){
        if (low>=high) return;
        int mid= (high+low)/2;
        mergesort( nums,low,mid);
        mergesort(nums, mid+1,high);
        merge(nums,low,mid,high);
    }

    vector<int> sortArray(vector<int>& nums) {
        mergesort(nums,0,nums.size()-1);
        return nums;
        
    }
};
2.
