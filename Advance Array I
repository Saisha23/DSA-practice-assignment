1. Two Sum

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mpp; 

        for (int i = 0; i < nums.size(); i++) {
            int complement = target - nums[i];
            if (mpp.find(complement) != mpp.end()) {
                return {mpp[complement], i};
            }
            mpp[nums[i]] = i;
        }

        return {};  
    }
};

2. Best time to buy and sell stocks

class Solution {
    public:
        int maxProfit(vector<int>& prices) {
            int mp = INT_MIN;
            int n = prices.size();
            int minValue = INT_MAX;
            for(int i=0; i<n; i++){
                minValue = min(minValue, prices[i]);
                mp = max(mp, prices[i] - minValue);
            }

            return (mp>=0? mp : 0);
        }
    };

3. Sort Colours

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int low=0;
        int mid=0;
        int high=n-1;
        while(mid<=high){
            if (nums[mid]==0){
                swap(nums[mid],nums[low]);
                low++;
                mid++;
            }
            else if (nums[mid]==1){
                mid++;
            }
            else{
                swap(nums[mid],nums[high]);
                high--;
            }
        }
    }
};
