1. Height of the tree

class Solution {
public:
    int maxDepth(TreeNode* root) {
        if (root==NULL) return 0;
        int lh= maxDepth(root->left);
        int rh= maxDepth(root->right);
        return 1+max(lh,rh);
        
    }
};

2. same tree

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(!p && !q) return true;
        if (!p || !q) return false;
        if( p->val != q->val) return false;

        return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);
    }
};

3. symmetric tree

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root==NULL) return false;
        return ismirror(root->left,root->right);
        
    }
    bool ismirror(TreeNode* left, TreeNode* right){
        if (!left && !right) return true;
        if(!left || !right) return false;
        if(left->val != right->val) return false;
        return ismirror(left->left,right->right) && ismirror(left->right,right->left);
        
    }
};
