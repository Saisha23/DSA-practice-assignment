1. add two number

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head= nullptr;
        ListNode* tail= nullptr;
        int carry=0;
        while (l1!= nullptr || l2!=  nullptr || carry != 0){
            int x= l1? l1->val: 0;
            int y = l2? l2->val :0;
            int sum = x+ y+ carry;
            carry= sum/10;
            int digit = sum% 10;
            ListNode* newnode= new ListNode(digit);
            if(!head) head=tail=newnode;
            else{
                tail->next = newnode;
                tail= tail->next;
            }

            if (l1) l1=l1->next;
            if (l2) l2=l2->next;
        }
        return head;
    }
};

2. rotate list

class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head || !head->next || k==0) return head;
        int c=1;
        ListNode* curr= head;
        while(curr->next){
            curr=curr->next;
            c++;
        }
        k= k%c;
        if (k==0){
            return head;
        }
        return rot(head,k);
    }
private:
    ListNode* rot(ListNode* head, int k){
        if(k==0 || !head || !head->next) return head;

        ListNode* prev=NULL;
        ListNode* curr=head;
        while(curr->next){
            prev=curr;
            curr=curr->next;
        }
        prev->next=NULL;
        curr->next=head;
        head=curr;

        return rot(head,k-1);
    }
};

3.remove duplicates from sorted list

class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* res= head;
        while(head && head-> next){
            if( head -> val==head-> next-> val){
                head-> next= head-> next -> next;}
            else{
                head= head-> next;
            }            
            }
        return res ;
        }
};
