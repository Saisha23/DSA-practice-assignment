1. diameter of tree

class Solution {
public:
    int maxi=0;
    int diameterOfBinaryTree(TreeNode* root) {
        height(root);
        return maxi;
        
    }
    int height(TreeNode* root){
        if (!root) return 0;
        int lh= height(root->left);
        int rh=height(root->right);
        maxi=max(maxi,rh+lh);
        return 1+max(lh,rh);
    }
};

2. path sum

class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if (!root) return false;
        if (!root->left && !root->right) return targetSum== root->val;
        return hasPathSum(root->left, targetSum- root->val) || hasPathSum(root->right, targetSum- root->val);
    }
};

3. print left/right view of binary tree

class Solution {
public:
    vector<int> ds;
    vector<int> rightSideView(TreeNode* root) {
        getans(root,0);
        return ds;
    }
    void getans(TreeNode* root, int level){
        if (root==NULL) return ;
        if (level==ds.size()){
            ds.push_back(root->val);
        }
        getans(root->right,level+1);
        getans(root->left,level+1);
    }  
};
